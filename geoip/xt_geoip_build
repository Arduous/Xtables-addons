#!/usr/bin/perl
#
#	Converter for MaxMind CSV database to binary, for xt_geoip
#	Copyright Â© Jan Engelhardt, 2008-2011
#
use Getopt::Long;
use IO::Handle;
use Text::CSV_XS; # or trade for Text::CSV
use strict;

my $csv = Text::CSV_XS->new({
	allow_whitespace => 1,
	binary => 1,
	eol => $/,
}); # or Text::CSV
my $target_dir = ".";

&Getopt::Long::Configure(qw(bundling));
&GetOptions(
	"D=s" => \$target_dir,
);

if (!-d $target_dir) {
	print STDERR "Target directory $target_dir does not exist.\n";
	exit 1;
}

&dump(&collect());

sub collect
{
	my %country;

	while (my $row = $csv->getline(*ARGV)) {
		if (!defined($country{$row->[4]})) {
			$country{$row->[4]} = {
				name => $row->[5],
				pool_v4 => [],
				pool_v6 => [],
			};
		}
		my $c = $country{$row->[4]};
		if ($row->[0] =~ /:/) {
			push(@{$c->{pool_v6}},
			     [&ip6_pack($row->[0]), &ip6_pack($row->[1])]);
		} else {
			push(@{$c->{pool_v4}}, [$row->[2], $row->[3]]);
		}
		if ($. % 4096 == 0) {
			print STDERR "\r\e[2K$. entries";
		}
	}

	print STDERR "\r\e[2K$. entries total\n";
	return \%country;
}

sub dump
{
	my $country = shift @_;

	foreach my $iso_code (sort keys %$country) {
		&dump_one($iso_code, $country->{$iso_code});
	}
}

sub dump_one
{
	my($iso_code, $country) = @_;
	my($file, $fh);

	printf "%5u IPv6 ranges for %s %s\n",
		scalar(@{$country->{pool_v6}}),
		$iso_code, $country->{name};

	$file = "$target_dir/".uc($iso_code).".iv6";
	if (!open($fh, "> $file")) {
		print STDERR "Error opening $file: $!\n";
		exit 1;
	}
	foreach my $range (@{$country->{pool_v6}}) {
		print $fh $range->[0], $range->[1];
	}
	close $fh;

	printf "%5u IPv4 ranges for %s %s\n",
		scalar(@{$country->{pool_v4}}),
		$iso_code, $country->{name};

	$file = "$target_dir/".uc($iso_code).".iv4";
	if (!open($fh, "> $file")) {
		print STDERR "Error opening $file: $!\n";
		exit 1;
	}
	foreach my $range (@{$country->{pool_v4}}) {
		print $fh pack("NN", $range->[0], $range->[1]);
	}
	close $fh;
}

sub ip6_pack
{
	my $addr = shift @_;
	$addr =~ s{::}{:!:};
	my @addr = split(/:/, $addr);
	my @e = (0) x 8;
	foreach (@addr) {
		if ($_ eq "!") {
			$_ = join(':', @e[0..(8-scalar(@addr))]);
		}
	}
	@addr = split(/:/, join(':', @addr));
	$_ = hex($_) foreach @addr;
	return pack("n*", @addr);
}

